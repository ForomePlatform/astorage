plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

group 'org.forome.astorage'
version '1.0.0p13'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

javadoc.options.encoding = 'UTF-8'

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

archivesBaseName = "astorage"

if (project.hasProperty('ossrhUsername')) {
    apply from: 'publish.gradle'
}

sourceCompatibility = 1.8

//publishing {
//    publications {
//        maven(MavenPublication) {
//            groupId = 'org.forome.astorage'
//            artifactId = 'core'
//            version = "${this.version}"
//
//            from components.java
//        }
//    }
//}


repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    make_databaseCompile.extendsFrom compile
    make_databaseRuntime.extendsFrom runtime

    serviceCompile.extendsFrom compile
    serviceRuntime.extendsFrom runtime
}


sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources {
            srcDirs "src/main/resources"
        }
    }
    make_database {
        java.srcDir 'src/make_database/java'
        resources.srcDirs = main.resources.srcDirs + "src/make_database/resources"
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    service {
        java.srcDir 'src/service/java'
        resources.srcDirs = main.resources.srcDirs + "src/service/resources"
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDirs = main.resources.srcDirs + "src/test/resources"
        compileClasspath += main.output + make_database.output
        runtimeClasspath += main.output + make_database.output
    }
}

jar {
    if (project.hasProperty('make_database')) {
        archiveName = 'astorage_makedatabase_v.' + project.version + '.jar'

        from files(sourceSets.make_database.output)
        from {
            configurations.make_databaseCompile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
            configurations.make_databaseRuntime.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    } else if (project.hasProperty('service')) {
        archiveName = 'astorage_service.jar'

        from files(sourceSets.service.output)
        from {
            configurations.serviceCompile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
            configurations.serviceRuntime.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    } else {
        archiveName = 'astorage_v.' + project.version + '.jar'

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
            configurations.runtime.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}

dependencies {

    compile 'com.github.samtools:htsjdk:2.23.0'

    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-io:commons-io:2.8.0'
    compile 'org.forome:rdao:1.13.2'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.apache.commons:commons-compress:1.20'
    compile 'org.apache.commons:commons-math3:3.5'

    compile 'org.rocksdb:rocksdbjni:6.6.4'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-core:1.2.2'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile 'net.minidev:json-smart:2.3'
    compile 'org.apache.commons:commons-compress:1.20'
    serviceCompile 'net.minidev:json-smart:2.3'

    serviceCompile 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
    serviceCompile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
    serviceCompile 'org.eclipse.jetty:jetty-webapp:9.4.11.v20180605'

    serviceCompile 'org.springframework:spring-core:4.3.9.RELEASE'
    serviceCompile 'org.springframework:spring-web:4.3.9.RELEASE'
    serviceCompile 'org.springframework:spring-webmvc:4.3.9.RELEASE'
    serviceCompile 'org.springframework:spring-context-support:4.3.9.RELEASE'
    serviceCompile 'org.springframework:spring-messaging:4.3.9.RELEASE'
    serviceCompile 'javax.servlet:jstl:1.2'

    serviceCompile "io.github.graphql-java:graphql-java-annotations:8.1"
    compile 'org.apache.commons:commons-math3:3.6.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Example Application'
                packaging 'jar'
                url 'https://github.com/ForomePlatform/astorage'

                scm {
                    connection 'scm:git:https://github.com/ForomePlatform/astorage.git'
                    developerConnection 'scm:svn:https://github.com/ForomePlatform/astorage.git'
                    url 'https://github.com/ForomePlatform/astorage.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'forome'
                        name 'forome LLC'
                        email 'develop@forome.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.forome" //optional if packageGroup == project.getGroup()
}
